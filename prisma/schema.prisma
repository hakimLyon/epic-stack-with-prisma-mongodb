datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model File {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  blob Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  image     Image?
}

model Image {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  file   File   @relation(fields: [fileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fileId String @unique @db.ObjectId

  contentType String
  altText     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User?
}

model Role {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name String @unique

  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  usersIds       String[]     @db.ObjectId
  users          User[]       @relation(fields: [usersIds], references: [id])
  permissionsIds String[]     @db.ObjectId
  permissions    Permission[] @relation(fields: [permissionsIds], references: [id])
}

model Permission {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rolesIds  String[] @db.ObjectId
  roles     Role[]   @relation(fields: [rolesIds], references: [id])
}

model User {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  email    String  @unique
  username String  @unique
  name     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  image   Image?  @relation(fields: [imageId], references: [fileId])
  imageId String? @unique @db.ObjectId

  password Password?
  notes    Note[]
  rolesIds String[]  @db.ObjectId
  roles    Role[]    @relation(fields: [rolesIds], references: [id])
  session  Session[]
}

model Password {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique @db.ObjectId
}

model Verification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())

  /// The type of verification, e.g. "email" or "phone"
  type String

  /// The thing we're trying to verify, e.g. a user's email or phone number
  target String

  /// The secret key used to generate the otp
  secret String

  /// The algorithm used to generate the otp
  algorithm String

  /// The number of digits in the otp
  digits Int

  /// The number of seconds the otp is valid for
  period Int

  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}

model Session {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String   @db.ObjectId
  expirationDate DateTime
}

model Note {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId String @db.ObjectId

  // our user search orders by recently owners who have recently updated notes
  // so indexing on the owner ID helps with that (a LOT).
  @@index([ownerId, updatedAt(sort: Desc)])
}
